#include<bits/stdc++.h>
#include <iterator>
#include <iostream>
#include <numeric>
#include <math.h>
#define ll long long
#define ull long
#define mpa make_pair
#define pb push_back
#define ff first
#define pii pair<ll,ll>
#define dd double
#define trace(x) cerr << #x << " : " << x << endl
#define ss second
#define boost ios_base::sync_with_stdio(0)
#define forp(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,n)    for(ll i=0;i<n;++i)
#define ren(i,n)    for(ll i=n-1;i>=0;i--)
#define forn(i,a,b) for(ll i=a;i>=b;i--)
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end();
#define sc(x) scanf("%lld",&x)
#define clr(x,val) memset(x,val,sizeof(x))
#define pr(x) printf("%lld\n",x) 
#define pdd pair<dd,dd>
#define read_arr(a,n) for(ll i=1;i<=n;i++)cin>>a[i];
#define init_arr(a,n) for(ll i=1;i<=n;i++)a[i]=n-i+1;
#define prec(x) cout<<fixed<<setprecision(x)
#define fre freopen("input.txt","r",stdin),freopen("output.txt","w",stdout)
#define arr array 
using namespace std;
vector<ll> adj[500005];
ll dp[500005],fact[500005],invfact[500005],sz[500005];
vector<ll> centroid;
ll mod=1e9+7,n,k;

ll modpow(ll a,ll n){
	ll res=1;
	while(n){
		if(n%2)res=(res*a)%mod;
		n/=2ll;
		a=(a*a)%mod;
	}
	return res;
}
void precomp(){
	fact[0]=1;
	invfact[0]=1;
	for(ll i=1;i<=500000;i++){
		fact[i]=(fact[i-1]*i)%mod;
		invfact[i]=modpow(fact[i],mod-2);
	}
}

ll mul_mod(ll a,ll b,ll mod){
	a%=mod;
	b%=mod;
	return (a*b)%mod;
}

void dfs(ll v,ll p){

	sz[v]=1;
    bool is_centroid=1;

	for(auto to:adj[v]){
		if(to == p)continue;
		dfs(to,v);
		sz[v]+=sz[to];
		if(sz[to] > n/2) is_centroid=0;
	}

	if(n-sz[v] > n/2) is_centroid=0;
	if(is_centroid) centroid.pb(v);
}

void get_sol(ll v,ll p){
	sz[v]=1;
	dp[v]=1;
	ll mul=1;

	for(auto to:adj[v]){
		if(to==p)continue;
		get_sol(to,v);
		sz[v]+=sz[to];
		mul=mul_mod(mul,invfact[sz[to]],mod);
		mul=mul_mod(mul,dp[to],mod);
	}
	mul=mul_mod(mul,fact[sz[v]-1],mod);
	dp[v]=mul;
}

void solve(ll tc){
	cin>>n>>k;
	for(ll i=1;i<=n;i++)adj[i].clear(),dp[i]=0,sz[i]=0;
	for(ll i=1;i<n;i++){
		ll x,y;
		cin>>x>>y;
		adj[x].pb(y);
		adj[y].pb(x);
	}
	centroid.clear();
	dfs(1,-1);

	if(k==1){
		
		if(centroid.size()==1){
			get_sol(centroid[0],-1);
			cout<<centroid[0]<<" "<<dp[centroid[0]]<<endl;
		}else{
			ll v=max(centroid[0],centroid[1]);
			get_sol(v,-1);
			cout<<v<<" "<<dp[v]<<endl;
		}

	}else{

		if(centroid.size()==2){
			ll v=min(centroid[0],centroid[1]);
			get_sol(v,-1);
			cout<<v<<" "<<dp[v]<<endl;
		}else{
            ll ma=0;
			ll v=0;
			dfs(centroid[0],-1);

			for(auto to:adj[centroid[0]]){
				
				if(sz[to]>ma){
					v=to;
					ma=sz[to];
				}

				if(sz[to]==ma){
					v=max(v,to);
				}

			}

			get_sol(v,-1);
			cout<<v<<" "<<dp[v]<<endl;

		}
	}	






}
	

int main(){

	boost;
	ll t;
	cin>>t;
	ll tc=1;
	precomp();

	


	while(t--){
		solve(tc);
		tc++;
	}
	

}
	
	
 
 
 
 


	

	







	
	

	
	




		


    
	


		
