#include<bits/stdc++.h>
#include <iterator>
#include <iostream>
#include <numeric>
#include <math.h>
#define ll long long
#define ull long
#define mpa make_pair
#define pb push_back
#define ff first
#define pii pair<ll,ll>
#define dd double
#define trace(x) cerr << #x << " : " << x << endl
#define ss second
#define boost ios_base::sync_with_stdio(0)
#define forp(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,n)    for(ll i=0;i<n;++i)
#define ren(i,n)    for(ll i=n-1;i>=0;i--)
#define forn(i,a,b) for(ll i=a;i>=b;i--)
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end();
#define sc(x) scanf("%lld",&x)
#define clr(x,val) memset(x,val,sizeof(x))
#define pr(x) prllf("%lld\n",x) 
#define pdd pair<dd,dd>
#define read_arr(a,n) for(ll i=1;i<=n;i++)cin>>a[i];
#define init_arr(a,n) for(ll i=1;i<=n;i++)a[i]=n-i+1;
#define prec(x) cout<<fixed<<setprecision(x)
#define fre freopen("input.txt","r",stdin),freopen("output.txt","w",stdout)
#define arr array 
using namespace std;

ll n,k,a;
vector<ll> special;
vector<ll> adj[200005];
ll dis[200005];
ll sol[2000005];
ll par[2000005];

void dfs(ll v,ll p){
	if(p>0) dis[v]=dis[p]+1;

	for(auto to:adj[v]){
		if(to==p)continue;
		dfs(to,v);
	}
}

void multi_source_bfs(){
	queue<ll> q;
	for(ll i=0;i<k;i++){
		sol[special[i]]=dis[special[i]];
		par[special[i]]=special[i];
		q.push(special[i]);
	}

	while(q.size()){
		ll v=q.front();
		q.pop();
		for(auto to:adj[v]){
			if(sol[to] < sol[v]-1){
				par[to]=par[v];
				sol[to]=sol[v]-1;
				q.push(to);
			}
		}
	}
}

void solve(ll tc){
	ll e;
	cin>>n>>k>>a;
	special.clear();
	

	for(ll i=1;i<=k;i++){
		cin>>e;
		special.pb(e);
	}

	for(ll i=1;i<=n;i++){
		adj[i].clear();
		dis[i]=0;
		sol[i]=-1e9;
	}

	for(ll i=1;i<n;i++){
		ll x,y;
		cin>>x>>y;
		adj[x].pb(y);
		adj[y].pb(x);
	}

	dfs(a,-1);
	multi_source_bfs();
	for(ll i=1;i<=n;i++)cout<<sol[i]<<" ";
	cout<<endl;
	for(ll i=1;i<=n;i++)cout<<par[i]<<" ";
	cout<<endl;
	
}
int main(){

	boost;

	ll t=1;
	cin>>t;

	
	ll tc=1;

	while(t--){
		solve(tc);
		tc++;
	}
	

}
	
	
 
 
 
 


	

	







	
	

	
	




		


    
	


		
